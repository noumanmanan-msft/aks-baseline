# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  azureSubscription: 'Nouman-External-MSFT-ADO-SP'
  resourceGroupName: 'rg-demo-scus-001'
  dockerRegistryServiceConnection: '6b933acb-0906-4872-a9ff-3d751ca9a12a'
  imageRepository: 'dotnet/core/aspnet/webapp'
  containerRegistry: 'acrdemoscus001.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  appServiceName: 'as-containerized-webapp-scus-001'
  containerAppEnvironmentName: 'ca-env-demo-scus-001'
  acaName: 'ca-webapp-scus-001'

  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'manifests'
        path: 'manifests'

    # Commented this task out as this works but do not need to run everytime
    # - task: AzureCLI@2
    #   displayName: Build Image through ACR
    #   inputs:
    #     azureSubscription: $(azureSubscription)
    #     scriptType: 'pscore'
    #     scriptLocation: 'inlineScript'
    #     inlineScript: |
    #       az acr build --registry acrdemoscus001 --image acrdemoscus001.azurecr.io/dotnet/core/aspnet/webapp:acrbuild-$(tag) .

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: $(vmImageName)
    environment: 'myenv.aksnamespace' #customize with your environment
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespace)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/deployment.yml
                $(System.ArtifactsDirectory)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

# - stage: 'QA'
#   displayName: Deploy to Container Apps
#   dependsOn: Build
#   jobs:
#   - deployment: DeployContainerApp
#     displayName: Deploy to Azure Container App
#     pool:
#       vmImage: 'Ubuntu-latest'
#     environment: 'QA'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#             # - task: AzureCLI@2
#             #   displayName: Publish image to Container Apps
#             #   inputs:
#             #     azureSubscription: $(azureSubscription)
#             #     scriptType: 'pscore'
#             #     scriptLocation: 'inlineScript'
#             #     inlineScript: |
#             #       az containerapp up --resource-group $(resourceGroupName) --name $(acaName) --image $(containerRegistry)/$(imageRepository):$(tag)

#             - task: AzureCLI@2
#               displayName: Update Container Environment Variables
#               inputs:
#                 azureSubscription: $(azureSubscription)
#                 scriptType: 'pscore'
#                 scriptLocation: 'inlineScript'
#                 inlineScript: |
#                   az containerapp update --name $(acaName) --resource-group $(resourceGroupName) --set-env-vars "CONTAINER_TAG=$(tag)"

#             - task: AzureContainerApps@1
#               inputs:
#                 azureSubscription: $(azureSubscription)
#                 containerAppEnvironment: $(containerNameEnvironmentName)
#                 containerAppName: $(acaName)
#                 resourceGroup: $(resourceGroupName)
#                 imageToDeploy: $(containerRegistry)/$(imageRepository):$(tag)